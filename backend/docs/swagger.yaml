basePath: /v1
definitions:
  main.CreateEventPayload:
    properties:
      description:
        type: string
      event_date:
        type: string
      latitude:
        type: number
      location_name:
        type: string
      longitude:
        type: number
      max_players:
        type: integer
      sport:
        type: string
      title:
        type: string
    required:
    - event_date
    - latitude
    - location_name
    - longitude
    - max_players
    - sport
    type: object
  main.EventFilterPayload:
    properties:
      after_date:
        description: RFC3339 string
        type: string
      before_date:
        description: RFC3339 string
        type: string
      event_owner:
        type: integer
      id:
        type: integer
      is_full:
        type: boolean
      location_name:
        type: string
      max_players:
        type: integer
      order:
        description: asc, desc
        type: string
      sort_by:
        description: event_datetime, created_at, etc.
        type: string
      sports:
        items:
          type: string
        type: array
    type: object
  main.LoginPayload:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  main.ProfilePayload:
    properties:
      age:
        type: integer
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      sport_preference:
        items:
          type: string
        type: array
    required:
    - age
    - email
    - first_name
    - gender
    - last_name
    - sport_preference
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  main.UpdateEventPayload:
    properties:
      description:
        type: string
      event_date:
        type: string
      latitude:
        type: number
      location_name:
        type: string
      longitude:
        type: number
      max_players:
        type: integer
      sport:
        type: string
      title:
        type: string
    type: object
  store.Event:
    properties:
      created_at:
        type: string
      description:
        type: string
      event_datetime:
        type: string
      event_owner:
        type: integer
      id:
        type: integer
      is_full:
        type: boolean
      latitude:
        type: number
      location_name:
        type: string
      longitude:
        type: number
      max_players:
        type: integer
      participants:
        items:
          $ref: '#/definitions/store.EventParticipant'
        type: array
      registered_count:
        type: integer
      sport:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  store.EventParticipant:
    properties:
      event_id:
        type: integer
      first_name:
        type: string
      id:
        type: integer
      joined_at:
        type: string
      last_name:
        type: string
      user_id:
        type: integer
    type: object
  store.Profile:
    properties:
      age:
        type: integer
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      sport_preference:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for sportify, a social network for sports enthusiasts.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Sportify
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: user login
      tags:
      - authentication
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /events:
    get:
      consumes:
      - application/json
      description: Returns a list of events filtered by criteria provided in the request
        body
      parameters:
      - description: Event filtering criteria
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/main.EventFilterPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Event'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all events with filters
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Creates a new sports event with the provided details
      parameters:
      - description: Event details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateEventPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Event'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new event
      tags:
      - events
  /events/{id}:
    delete:
      consumes:
      - application/json
      description: Event owner deletes their event (including all participants)
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid ID
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: User is not the event owner
          schema: {}
        "404":
          description: Event not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete an event
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Get details of a specific event including participants
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Event'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get event details
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update event details (partial or full). Only owner can update.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fields to update
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateEventPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Event'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update an event
      tags:
      - events
  /events/{id}/join:
    post:
      consumes:
      - application/json
      description: Allows a user to join an existing event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Join an event
      tags:
      - events
  /events/{id}/leave:
    delete:
      consumes:
      - application/json
      description: Allows a user to leave from an existing event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: leave an event
      tags:
      - events
  /profile:
    post:
      consumes:
      - application/json
      description: updates a user profile
      parameters:
      - description: User profile
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.ProfilePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Profile'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: updates a user profile
      tags:
      - profile
    put:
      consumes:
      - application/json
      description: creates a user profile
      parameters:
      - description: User profile
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.ProfilePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Profile'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: creates a user profile
      tags:
      - profile
  /profile/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a post by userID, if no userID is provided, fetches the
        profile of the authenticated user
      parameters:
      - default: 0
        description: user Id
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Profile'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a profile
      tags:
      - profile
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
